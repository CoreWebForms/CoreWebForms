// MIT


namespace System.Web;

internal static class AssemblyRef
{
    public const string SystemWebExtensionsDesign = nameof(SystemWebExtensionsDesign);
    public const string SystemDesign = nameof(SystemDesign);
    public const string MicrosoftVisualStudioWeb = nameof(MicrosoftVisualStudioWeb);
    public const string SystemWebDynamicData = nameof(SystemWebDynamicData);
}

internal static class SR
{
    public static string GetString(string name, params object[] args) => name;
    
    public const string Ambiguous_server_tag = "The server tag '{0}' is ambiguous. Please modify the associated registration that is causing ambiguity and pick a new tag prefix.";
    public const string Ambiguous_type = "The type '{0}' is ambiguous: it could come from assembly '{1}' or from assembly '{2}'. Please specify the assembly explicitly in the type name.";
    public const string App_session_only_valid_in_global_asax = "The Application and Session scopes are valid only in the global.asax file.";
    public const string Assembly_not_compiled = "Could not load the assembly '{0}'. Make sure that it is compiled before accessing the page.";
    public const string Async_addhandler_too_late = "This operation can only be performed prior to PreRenderComplete page event.";
    public const string Async_and_aspcompat = "Async attribute cannot be set to true when AspCompat mode is enabled.";
    public const string Async_and_transaction = "Async attribute cannot be set to true when Transaction mode is enabled.";
    public const string Async_required = "This operation requires the page to be asynchronous (the Async attribute must be set to true).";
    public const string Async_task_timed_out = "An asynchronous operation exceeded the page timeout.";
    public const string Attr_not_supported_in_directive = "The '{0}' attribute is not supported by the '{1}' directive.";
    public const string Attr_not_supported_in_pagedirective = "The '{0}' attribute is not supported by the '{1}' directive in a page.";
    public const string Attr_not_supported_in_ucdirective = "The '{0}' attribute is not supported by the '{1}' directive in a user control.";
    public const string Attrib_not_allowed = "The attribute '{0}' is not allowed in this page.";
    public const string Attrib_parse_error = "Error parsing attribute '{0}': {1}";
    public const string Attributes_mutually_exclusive = "The '{0}' and '{1}' attributes are mutually exclusive.";
    public const string AutoPostBackControl_CausesValidation = "Whether the control causes validation to fire.";
    public const string BadlyFormattedBind = "A call to Bind was not well formatted.  Please refer to documentation for the correct parameters to Bind.";
    public const string BadlyFormattedBindItem = "Invalid code syntax for BindItem.";
    public const string Base_class_field_with_type_different_from_type_of_control = "The base class includes the field '{0}', but its type ({1}) is not compatible with the type of control ({2}).";
    public const string Base_type_not_allowed = "The base type '{0}' is not allowed for this page.";
    public const string BaseCompareValidator_CultureInvariantValues = "Whether we should do culture invariant conversion against the string value properties on the validator.";
    public const string BaseDataBoundControl_DataSource = "The data source that is used to populate the items in the list.";
    public const string BaseDataBoundControl_DataSourceID = "The control ID of an IDataSource that will be used as the data source.";
    public const string BaseDataBoundControl_OnDataBound = "Fires after the control has been databound.";
    public const string BaseDataList_CellPadding = "The padding within cells.";
    public const string BaseDataList_CellSpacing = "The spacing between cells.";
    public const string BaseDataList_DataKeyField = "The field in the data source used to populate the DataKeys collection.";
    public const string BaseDataList_DataKeys = "The collection of data keys.";
    public const string BaseDataList_DataMember = "The table or view used for binding when a DataSet is used as a data source.";
    public const string BaseDataList_OnSelectedIndexChanged = "Fires when the current selection changes.";
    public const string BaseValidator_ControlToValidate = "ID of the control to validate.";
    public const string BaseValidator_Display = "How the validator is displayed.";
    public const string BaseValidator_EnableClientScript = "Indicates whether to perform validation on the client in up-level browsers.";
    public const string BaseValidator_ErrorMessage = "Message to display in a ValidationSummary when the validated control is invalid.";
    public const string BaseValidator_IsValid = "Indicates whether the validated control is in error.";
    public const string BaseValidator_SetFocusOnError = "Whether the validator sets focus on the control when invalid.";
    public const string BaseValidator_Text = "Text to display for the validator when the validated control is invalid.";
    public const string BaseValidator_ValidationGroup = "The group to which the validator belongs.";
    public const string Binding_DataMember = "The element or table name that contains the attributes or columns specified by TextField and ValueField.";
    public const string BindingBehavior_ValueNotFound = "A value for '{0}' is required but is not present in the request.";
    public const string BoundColumn_DataField = "The field to which this column is bound.";
    public const string BoundColumn_DataFormatString = "The formatting that is applied to the bound value. For example, \"{0:d}\" or \"{0:c}\".";
    public const string BoundColumn_ReadOnly = "Whether the column does not permit editing of its bound field.";
    public const string BoundField_ApplyFormatInEditMode = "Whether the data should be shown with the DataFormatString formatting applied when in edit mode.  If set to true, the data may have to be unformatted before it is updated in the data source.";
    public const string BoundField_ConvertEmptyStringToNull = "Whether the field treats empty strings as null when the value is extracted from the field.";
    public const string BoundField_DataField = "The field to which this field is bound.";
    public const string BoundField_DataFormatString = "The formatting that is applied to the bound value. For example, \"{0:d}\" or \"{0:c}\".";
    public const string BoundField_HtmlEncode = "Whether the field is HTML encoded when displayed to the user.";
    public const string BoundField_NullDisplayText = "The text displayed if the data bound to the field is null.";
    public const string BoundField_ReadOnly = "Whether the field does not permit editing of its bound field.";
    public const string BoundField_WrongControlType = "BoundField {0} contains a control that isn't a TextBox.  Override OnDataBindField to inherit from BoundField and add different controls.";
    public const string Button_CausesValidation = "Whether the button causes validation to fire.";
    public const string Button_OnClick = "Fires when the button is clicked.";
    public const string Button_OnClientClick = "The client-side script that is executed on a client-side OnClick.";
    public const string Button_OnCommand = "Fires when the button is clicked and an associated command is defined.";
    public const string Button_PostBackUrl = "The URL to post to when the button is clicked.";
    public const string Button_Text = "The text to be shown on the button.";
    public const string Button_UseSubmitBehavior = "Indicates whether the button render as a submit button.";
    public const string ButtonColumn_ButtonType = "The type of button contained within the column.";
    public const string ButtonColumn_CausesValidation = "Whether pressing the button will cause validation to occur.";
    public const string ButtonColumn_DataTextField = "The field bound to the text property of the button.";
    public const string ButtonColumn_DataTextFormatString = "The formatting applied to the value bound to the Text property. For example, \"select: {0}\".";
    public const string ButtonColumn_Text = "The text used for the button.";
    public const string ButtonColumn_ValidationGroup = "The name of the validation group for which this button should cause validation.";
    public const string ButtonField_DataTextField = "The field bound to the text property of the button.";
    public const string ButtonField_DataTextFormatString = "The formatting applied to the value bound to the Text property. For example, \"select: {0}\".";
    public const string ButtonField_ImageUrl = "The URL of the image if the ButtonType is Image.";
    public const string ButtonField_Text = "The text used for the button.";
    public const string ButtonFieldBase_ButtonType = "The type of the button to be rendered in the field.  The values are Link, Button, and Image.";
    public const string ButtonFieldBase_CausesValidation = "Whether pressing the button will cause validation to occur.";
    public const string ButtonFieldBase_ValidationGroup = "The name of the validation group for which this button should cause validation.";
    public const string Cache_not_available = "Cache is not available";
    public const string CacheProfile_Not_Found = "The '{0}' cache profile is not defined.  Please define it in the configuration file.";
    public const string Cannot_add_value_not_collection = "'{0}' could not be added to the collection. Details: {1}";
    public const string Cannot_evaluate_expression = "Cannot have the expression '{0}' that does not support evaluate in a non-compiled page.";
    public const string Cannot_exit_up_top_directory = "Cannot use a leading .. to exit above the top directory.";
    public const string Cannot_Have_Children_Of_Type = "'{0}' cannot have children of type '{1}'.";
    public const string Cannot_init = "'{0}' could not be initialized. Details: {1}";
    public const string Cannot_set_property = "'{0}' could not be set on property '{1}'.";
    public const string Cannot_set_recursive_skin = "Control '{0}' cannot be declared in a template inside a control skin of the same type with identical skinID.";
    public const string CannotSetValidationOnDataControlButtons = "Setting CausesValidation on DataControlButtons is not supported.";
    public const string CannotSetValidationOnPagerButtons = "Setting CausesValidation on DataControlPagerLinkButtons is not supported.";
    public const string CannotUseParentPostBackWhenValidating = "A button that causes validation in {0} '{1}' is attempting to use the container {0} as the post back target.  The button should either turn off validation or use itself as the post back container.";
    public const string Cant_Multiselect = "Cannot have multiple items selected in a {0}.";
    public const string Cant_Multiselect_In_Single_Mode = "Cannot have multiple items selected when the SelectionMode is Single.";
    public const string Cant_use_default_items_and_filtered_collection = "You cannot use {0}'s default collection '{1}' without the property tags when using a filtered version of the same collection.";
    public const string Cant_use_nocompile_uc = nameof(Cant_use_nocompile_uc);
    public const string CantGenPropertySet = "Unable to generate code for a value of type '{1}'. This error occurred while trying to generate the property value for {0}.";
    public const string ChangePassword_CreateUserText = "The text to be shown for the create user link.";
    public const string ChangePassword_HelpPageText = "The text to be shown for the help link.";
    public const string ChangePassword_PasswordRecoveryText = "The text to be shown for the password recovery link.";
    public const string ChangePassword_UserNameRequiredErrorMessage = "The text to be shown in the validation summary when the user name is empty.";
    public const string CheckBox_AutoPostBack = "Automatically posts back to the server when the control is clicked.";
    public const string CheckBox_Checked = "The checked state of the control.";
    public const string CheckBox_InputAttributes = "Attributes to be rendered on the HTML input element.";
    public const string CheckBox_LabelAttributes = "Attributes to be rendered on the HTML span element associated with the checkbox text.";
    public const string CheckBox_Text = "The text label shown with the check box.";
    public const string CheckBoxField_CouldntParseAsBoolean = "The data in the CheckBoxField '{0}' could not be parsed as a boolean value.  Try using a BoundField instead.";
    public const string CheckBoxField_NotSupported = "The property {0} is not supported on CheckBoxField.";
    public const string CheckBoxField_Text = "The Text property of the CheckBox in this field.";
    public const string CheckBoxField_WrongControlType = "CheckBoxField '{0}' contains a control that isn't a CheckBox.  Override OnDataBindField to inherit from CheckBoxField and add different controls.";
    public const string CheckBoxList_CellPadding = "The padding between each item.";
    public const string CheckBoxList_CellSpacing = "The spacing between each item.";
    public const string CheckBoxList_RepeatColumns = "The number of columns used to lay out the items.";
    public const string Children_not_supported_on_not_controls = "Child objects are not supported for objects that are not controls.";
    public const string Circular_include = "Circular file references are not allowed.";
    public const string ClientScriptManager_InvalidPostBackArgument = nameof(ClientScriptManager_InvalidPostBackArgument);
    public const string ClientScriptManager_JqueryNotRegistered = "WebForms UnobtrusiveValidationMode requires a ScriptResourceMapping for 'jquery'. Please add a ScriptResourceMapping named jquery(case-sensitive).";
    public const string ClientScriptManager_RegisterForEventValidation_Too_Early = "RegisterForEventValidation can only be called during Render();";
    public const string Code_not_allowed = "Code blocks are not allowed in this file.";
    public const string Code_not_supported_on_not_controls = "Code blocks are not supported in this context.";
    public const string Codefile_without_inherits = "The 'CodeFile' attribute cannot be used without an 'Inherits' attribute.";
    public const string CodeFileBaseClass_Without_Codefile = "The 'CodeFileBaseClass' attribute cannot be used without a 'CodeFile' attribute.";
    public const string Collection_readonly_Codeblocks = "The Controls collection cannot be modified because the control contains code blocks (i.e. <% ... %>).";
    public const string CommandField_CallbacksNotSupported = "Callbacks are not supported on CommandField when the select button is enabled because other controls on your page that are dependent on the selected value of '{0}' for their rendering will not update in a callback.  Turn callbacks off on '{0}'.";
    public const string CommandField_CancelImageUrl = "The URL of the image to be displayed as the cancel button.";
    public const string CommandField_CancelText = "The text to be displayed on the cancel button.";
    public const string CommandField_DefaultCancelCaption = "Cancel";
    public const string CommandField_DefaultDeleteCaption = "Delete";
    public const string CommandField_DefaultEditCaption = "Edit";
    public const string CommandField_DefaultInsertCaption = "Insert";
    public const string CommandField_DefaultNewCaption = "New";
    public const string CommandField_DefaultSelectCaption = "Select";
    public const string CommandField_DefaultUpdateCaption = "Update";
    public const string CommandField_DeleteImageUrl = "The URL of the image to be displayed as the delete button.";
    public const string CommandField_DeleteText = "The text to be displayed on the delete button.";
    public const string CommandField_EditImageUrl = "The URL of the image to be displayed as the edit button.";
    public const string CommandField_EditText = "The text to be displayed on the edit button.";
    public const string CommandField_InsertImageUrl = "The URL of the image to be displayed as the insert button.";
    public const string CommandField_InsertText = "The text to be displayed on the insert button.";
    public const string CommandField_NewImageUrl = "The URL of the image to be displayed as the new button.";
    public const string CommandField_NewText = "The text to be displayed on the new button.";
    public const string CommandField_SelectImageUrl = "The URL of the image to be displayed as the select button.";
    public const string CommandField_SelectText = "The text to be displayed on the select button.";
    public const string CommandField_ShowCancelButton = "Whether the field should display a cancel button to the user.";
    public const string CommandField_ShowDeleteButton = "Whether the field should display a delete button to the user.";
    public const string CommandField_ShowEditButton = "Whether the field should display an edit button to the user.";
    public const string CommandField_ShowInsertButton = "Whether the field should display an insert button to the user.";
    public const string CommandField_ShowSelectButton = "Whether the field should display a select button to the user.";
    public const string CommandField_UpdateImageUrl = "The URL of the image to be displayed as the update button.";
    public const string CommandField_UpdateText = "The text to be displayed on the update button.";
    public const string Common_TypeMustImplementInterface = "The type '{0}' does not implement the interface '{1}'.";
    public const string Compilmode_not_allowed = "The compilation mode cannot be set to 'Never', because an earlier construct in the page requires compilation.";
    public const string Content_allowed_in_top_level_only = "Content controls have to be top-level controls in a content page or a nested master page that references a master page.";
    public const string Content_ContentPlaceHolderID = "The ID of the corresponding ContentPlaceHolder in the master page.";
    public const string Content_only_one_contentPlaceHolderID_allowed = "Only one ContentPlaceHolderID attribute is allowed.";
    public const string ContentPlaceHolder_duplicate_contentPlaceHolderID = "Duplicate ContentPlaceHolder '{0}' were found. ContentPlaceHolders require unique IDs.";
    public const string ContentPlaceHolder_only_in_master = "ContentPlaceHolder can only be used in .master files.";
    public const string Control_Cannot_Databind = "'{0}' cannot contain a data binding expression.";
    public const string Control_ClientID = "The ID of the control that is rendered for the client.";
    public const string Control_ClientIDMode = "Indicates how the ClientID should be generated for the control.";
    public const string Control_Controls = "The collection of child controls owned by the control.";
    public const string Control_does_not_allow_children = "'{0}' does not allow child controls.";
    public const string Control_EnableTheming = "Indicates whether the control can be themed.";
    public const string Control_ID = "Programmatic name of the control.";
    public const string Control_MaintainState = "Whether the control automatically saves its state for use in round-trips.";
    public const string Control_Missing_Attribute = "The required attribute '{0}' is not found on '{1}' control.";
    public const string Control_NamingContainer = "The containing control or page within which ID is unique.";
    public const string Control_NotADescendentOfNamingContainer = "This control is not a descendent of the NamingContainer of '{0}'.";
    public const string Control_OnDataBind = "Fires when the control's data binding expressions are to be evaluated.";
    public const string Control_OnDisposed = "Fires when the control has been disposed.";
    public const string Control_OnInit = "Fires when the page has been initialized.";
    public const string Control_OnLoad = "Fires when the page has been loaded.";
    public const string Control_OnPreRender = "Fires before the page is rendered.";
    public const string Control_OnServerCheckChanged = "Fires when the checked state of the control changes.";
    public const string Control_OnUnload = "Fires when the page is unloaded.";
    public const string Control_Page = "The page containing the control.";
    public const string Control_Parent = "The control containing this control.";
    public const string Control_Site = "Site of the control.";
    public const string Control_SkinId = "The SkinId of the control skin that provides the skin of the control.";
    public const string Control_State = "Current viewstate of the control.";
    public const string Control_TemplateControl = "The TemplateControl that hosts this control.";
    public const string Control_TemplateSourceDirectory = "The virtual directory of the Page or UserControl that contains this control.";
    public const string Control_type_not_allowed = "The control type '{0}' is not allowed on this page.";
    public const string Control_UniqueID = "The unique ID of the control within the page.";
    public const string Control_ValidateRequestMode = "Determines whether the control validates client input or not. Defaults to inherit from parent.";
    public const string Control_ViewStateMode = "Determines whether the control has viewstate enabled or not, defaults to inherit from parent.";
    public const string Control_Visible = "Indicates whether the control is visible and rendered.";
    public const string ControlAdapters_TypeNotFound = "Unable to create type '{0}'.";
    public const string ControlBuilder_CannotHaveComplexString = "The '{1}' property of '{0}' cannot be declared as an inner property, it must be declared as an attribute.";
    public const string ControlBuilder_CannotHaveMultipleBoundEntries = "Cannot have more than one binding on property '{0}' on '{1}'. Ensure that this property is not bound through an implicit expression, for example, using meta:resourcekey.";
    public const string ControlBuilder_CollectionHasNoAddMethod = "The collection '{0}' does not have an Add() method.";
    public const string ControlBuilder_DatabindingRequiresEvent = "Databinding expressions are only supported on objects that have a DataBinding event. {0} does not have a DataBinding event.";
    public const string ControlBuilder_ExpressionsNotAllowedInThemes = "Expressions are not allowed in skin files.";
    public const string ControlBuilder_IDMustUseAttribute = nameof(ControlBuilder_IDMustUseAttribute);
    public const string ControlBuilder_InvalidLocalizeValue = "'{0}' is not a valid value for the meta:localize attribute. Only 'true' and 'false' are supported.";
    public const string ControlBuilder_ParseTimeDataNotAvailable = "The ParseTimeData property can only be used during parsing.";
    public const string ControlBuilder_TwoWayBindingNonProperty = "Two-way binding is only supported for properties. '{0}' is not a valid property on '{1}'";
    public const string ControlNonVisual = "Control of type '{0}' is a non-visual control and does not support setting the Visible property.";
    public const string ControlRenderedOutsideServerForm = nameof(ControlRenderedOutsideServerForm);
    public const string Controls_Cant_Change_Between_Posts = "Failed to load viewstate.  The control tree into which viewstate is being loaded must match the control tree that was used to save viewstate during the previous request.  For example, when adding controls dynamically, the controls added during a post-back must match the type and position of the controls added during the initial request.";
    public const string ControlSkin_cannot_contain_controls = "Control skins cannot contain child controls.";
    public const string Ctrl_not_data_handler = "Page.RegisterRequiresPostBack can only be called on controls that implement IPostBackDataHandler.";
    public const string Dangerous_input_detected_descr = nameof(Dangerous_input_detected_descr);
    public const string DataBinder_Invalid_Indexed_Expr = "DataBinding: '{0}' is not a valid indexed expression.";
    public const string DataBinder_No_Indexed_Accessor = "DataBinding: '{0}' does not allow indexed access.";
    public const string DataBinder_Prop_Not_Found = "DataBinding: '{0}' does not contain a property with the name '{1}'.";
    public const string DataBoundControl_CallingDataMethods = "Occurs before model methods are invoked for data operations. Handle this event if the model methods are defined on a custom type other than the code behind file.";
    public const string DataBoundControl_DataMember = "The table or view used for binding against.";
    public const string DataBoundControl_DataSourceDoesntSupportPaging = "The data source '{0}' does not support server-side paging and it returned non-ICollection data.  See your data source documentation to enable paging.";
    public const string DataBoundControl_DeleteMethod = "The name of the method on the page that is called when this control does a delete operation.";
    public const string DataBoundControl_EnableModelValidation = "Whether page validation will be performed after validation is done in the model.";
    public const string DataBoundControl_InsertMethod = "The name of the method on the page that is called when this control does an insert operation.";
    public const string DataBoundControl_InvalidDataPropertyChange = "Data properties on data control '{0}' such as DataSource, DataSourceID, and DataMember cannot be changed during the databinding phase of the control.";
    public const string DataBoundControl_InvalidDataSourceType = "Data source is an invalid type.  It must be either an IListSource, IEnumerable, or IDataSource.";
    public const string DataBoundControl_ItemType = "The name of the model type used in the SelectMethod, InsertMethod, UpdateMethod, and DeleteMethod.";
    public const string DataBoundControl_NeedICollectionOrTotalRowCount = "If a data source does not return ICollection and cannot return the total row count, it cannot be used by the {0} to implement server-side paging.";
    public const string DataBoundControl_NullView = "The data source retrieved by '{0}' returned a null DataSourceView.";
    public const string DataBoundControl_OnCreatingModelDataSource = "Raised before the data bound control is data binding using data methods.";
    public const string DataBoundControl_SelectMethod = "The name of the method on the page that is called when this control does a select operation.";
    public const string DataBoundControl_UpdateMethod = "The name of the method on the page that is called when this control does an update operation.";
    public const string DataBoundControlHelper_NoNamingContainer = "The {0} control '{1}' does not have a naming container.  Ensure that the control is added to the page before calling DataBind.";
    public const string DataBoundLiterals_cant_bind = "A call to Bind must be assigned to a property of a control inside a template.";
    public const string DataControl_DataSourceDoesntExist = "The DataSourceID of '{0}' must be the ID of a control of type IDataSource.  A control with ID '{1}' could not be found.";
    public const string DataControl_DataSourceIDMustBeDataControl = "The DataSourceID of '{0}' must be the ID of a control of type IDataSource.  '{1}' is not an IDataSource.";
    public const string DataControl_ItemType_MultipleDataSources = "DataSource or DataSourceID cannot be defined on '{0}' when it uses model binding.";
    public const string DataControl_MultipleDataSources = "Both DataSource and DataSourceID are defined on '{0}'.  Remove one definition.";
    public const string DataControl_ViewNotFound = "The view that data bound control '{0}' requested could not be found. Check that the DataMember property is valid.";
    public const string DataControlField_AccessibleHeaderText = "The text rendered by some controls as the abbreviated text within the header of this field.";
    public const string DataControlField_CallbacksNotSupported = "Callbacks are not supported on this data control field.  Turn callbacks off on '{0}'.";
    public const string DataControlField_ControlStyle = "The style applied to each control within this field.";
    public const string DataControlField_FooterStyle = "The style applied to footer within this field.";
    public const string DataControlField_FooterText = "The text within the footer of this field.";
    public const string DataControlField_HeaderImageUrl = "The URL of the image to be displayed in the header of this field.";
    public const string DataControlField_HeaderStyle = "The style applied to header within this field.";
    public const string DataControlField_HeaderText = "The text within the header of this field.";
    public const string DataControlField_InsertVisible = "Whether the field is present when in Insert mode.";
    public const string DataControlField_ItemStyle = "The style applied to rows within this field.";
    public const string DataControlField_NoContainer = "A DataControlField must be within an INamingContainer.";
    public const string DataControlField_ShowHeader = "Whether the field's HeaderText is visible.  This property is used to control layout by some controls.";
    public const string DataControlField_SortExpression = "The sort expression associated with the field.";
    public const string DataControlField_Visible = "Whether the field is visible or not.";
    public const string DataControlFieldCell_ShouldNotSetValidateRequestMode = "DataControlFieldCell gets the value of ValidateRequestMode from its ContainingField. The ValidateRequestMode property cannot be set directly on DataControlFieldCell.";
    public const string DataControlFieldCollection_InvalidType = "Object is not a DataControlField.";
    public const string DataControlFieldCollection_InvalidTypeIndex = "Type index is out of bounds.";
    public const string DataControls_AutoGenerateColumns = "Whether the columns are generated automatically at runtime based on the associated data source.";
    public const string DataControls_Caption = "The descriptive caption associated with the control.";
    public const string DataControls_Columns = "The set of columns to be shown in the control.";
    public const string DataControls_DataKeyNames = "A comma-separated list of key fields in the data source.";
    public const string DataControls_DataSourceMustBeCollectionWhenNotDataBinding = nameof(DataControls_DataSourceMustBeCollectionWhenNotDataBinding);
    public const string DataControls_FooterStyle = "Style applied to the footer.";
    public const string DataControls_GridLines = "Settings for grid lines between cells.";
    public const string DataControls_HeaderStyle = "Style applied to the header.";
    public const string DataControls_OnItemCreated = "Fires when an item is created.";
    public const string DataControls_OnItemDataBound = "Fires after an item has been databound.";
    public const string DataControls_OnItemDeleted = "Fires after a Delete Command is executed on the data source.";
    public const string DataControls_OnItemDeleting = "Fires before a Delete Command is executed on the data source.";
    public const string DataControls_OnItemInserted = "Fires after an Insert Command is executed on the data source.";
    public const string DataControls_OnItemInserting = "Fires before an Insert Command is executed on the data source.";
    public const string DataControls_OnItemUpdated = "Fires after an Update Command is executed on the data source.";
    public const string DataControls_OnItemUpdating = "Fires before an Update Command is executed on the data source.";
    public const string DataControls_ShowFooter = "Whether to the show the control's footer.";
    public const string DataControls_ShowHeader = "Whether to the show the control's header.";
    public const string DataGrid_AllowCustomPaging = "Whether to turn on support for custom paging.";
    public const string DataGrid_AllowPaging = "Whether to turn on paging functionality in the DataGrid.";
    public const string DataGrid_AllowSorting = "Whether the column headers can be used to sort the associated data source.";
    public const string DataGrid_AlternatingItemStyle = "The style applied to alternating items.";
    public const string DataGrid_CurrentPageIndex = "The index of the current page.";
    public const string DataGrid_EditItemIndex = "The index of the item shown in edit mode.";
    public const string DataGrid_EditItemStyle = "The style applied to items in edit mode.";
    public const string DataGrid_Items = "The collection of items.";
    public const string DataGrid_ItemStyle = "The style applied to items.";
    public const string DataGrid_Missing_VirtualItemCount = "AllowCustomPaging must be true and VirtualItemCount must be set for a DataGrid with ID '{0}' when AllowPaging is set to true and the selected data source does not implement ICollection.";
    public const string DataGrid_NoAutoGenColumns = "DataGrid with id '{0}' could not automatically generate any columns from the selected data source.";
    public const string DataGrid_OnCancelCommand = "Fires when a Cancel CommandEvent is generated within the DataGrid.";
    public const string DataGrid_OnDeleteCommand = "Fires when a Delete CommandEvent is generated within the DataGrid.";
    public const string DataGrid_OnEditCommand = "Fires when an Edit CommandEvent is generated within the DataGrid.";
    public const string DataGrid_OnItemCommand = "Fires when an event is generated within the DataGrid.";
    public const string DataGrid_OnPageIndexChanged = "Fires when the current page index of the DataGrid has changed.";
    public const string DataGrid_OnSortCommand = "Fires when a Sort CommandEvent is generated within the DataGrid.";
    public const string DataGrid_OnUpdateCommand = "Fires when an Update CommandEvent is generated within the DataGrid.";
    public const string DataGrid_PageCount = "The current page count.";
    public const string DataGrid_PagerStyle = "Controls the paging UI associated with the control.";
    public const string DataGrid_PageSize = "The number of items from the data source to display per page.";
    public const string DataGrid_SelectedItem = "The currently selected item.";
    public const string DataGrid_SelectedItemStyle = "The style applied to selected items.";
    public const string DataGrid_VisibleItemCount = "The count of visible items.";
    public const string DataGridColumn_FooterStyle = "The style applied to footer within this column.";
    public const string DataGridColumn_FooterText = "The text within the footer of this column.";
    public const string DataGridColumn_HeaderImageUrl = "The URL of the image to be displayed in the header of this column.";
    public const string DataGridColumn_HeaderStyle = "The style applied to header within this column.";
    public const string DataGridColumn_HeaderText = "The text within the header of this column.";
    public const string DataGridColumn_ItemStyle = "The style applied to rows within this column.";
    public const string DataGridColumn_SortExpression = "The sort expression associated with the column.";
    public const string DataGridColumn_Visible = "Whether the column is visible or not.";
    public const string DataGridPagerStyle_Mode = "The type of paging UI to use.";
    public const string DataGridPagerStyle_PageButtonCount = "Number of pages to show in the paging UI.";
    public const string DataGridPagerStyle_Position = "The position of the navigation bar.";
    public const string DataGridPagerStyle_Visible = "Whether the paging UI is visible.";
    public const string DataItem_Not_Found = "A data item was not found in the container. The container must either implement IDataItemContainer, or have a property named DataItem.";
    public const string DataSourceView_NoPaging = "The data source does not support server-side data paging.";
    public const string DataSourceView_NoRowCount = "The data source does not support retrieving the number of rows of data.";
    public const string DataSourceView_NoSorting = "The data source does not support sorting.";
    public const string Debugging_not_supported_in_low_trust = "Debugging is not supported under current trust level settings.";
    public const string DesignTimeTemplateParser_ErrorParsingTheme = "There was an error parsing the theme:";
    public const string DetailsViewFormView_ControlMustBeInEditMode = "{0} '{1}' must be in edit mode to update a record.";
    public const string DetailsViewFormView_ControlMustBeInInsertMode = "{0} '{1}' must be in insert mode to insert a new record.";
    public const string Device_unsupported_in_directive = "The '{0}' directive does not support the use of device filters on its attributes.";
    public const string Directive_not_allowed = "The directive '{0}' is not allowed in this page.";
    public const string Duplicate_attr_in_directive = "The directive contains duplicate '{0}' attributes.";
    public const string Duplicate_attr_in_tag = "The tag contains duplicate '{0}' attributes.";
    public const string Duplicate_id_used = "Multiple controls with the same ID '{0}' were found. {1} requires that controls have unique IDs.";
    public const string Duplicate_registered_tag = "The '{0}' tag has already been registered.";
    public const string Empty_attribute = "The '{0}' attribute cannot be an empty string.";
    public const string Empty_expression = nameof(Empty_expression);
    public const string Empty_extension = "The file '{0}' must have an extension in order to be compiled.";
    public const string Empty_file_name = "The file name cannot be an empty string.";
    public const string Empty_path_has_no_directory = "Empty path has no directory.";
    public const string Enablesessionstate_must_be_true_false_or_readonly = "enableSessionState must be set to true, false or ReadOnly";
    public const string EnumAttributeInvalidString = "'{0}' is not a valid value for the '{2}' attribute. '{2}' must be a single text (not numeric) value from the '{3}' enumeration.";
    public const string Enumerator_MoveNext_Not_Called = "You must call MoveNext on IEnumerator before accessing the Current property.";
    public const string Error_page_not_supported_when_buffering_off = "Error page is not supported when buffering is disabled.";
    public const string ErrorSerializingValue = "Error serializing value '{0}' of type '{1}.'";
    public const string Event_handler_cant_be_empty = "The {0} event handler cannot be an empty string.";
    public const string Event_not_allowed = "The event handler '{0}' is not allowed in this page.";
    public const string Events_cant_be_filtered = "The filter '{0}' cannot be applied to the attribute '{1}' because it is an event handler.";
    public const string ExpressionBuilder_InvalidType = "The type '{0}' is not an ExpressionBuilder.";
    public const string ExpressionBuilder_LiteralExpressionsNotAllowed = nameof(ExpressionBuilder_LiteralExpressionsNotAllowed);
    public const string FactoryGenerator_TypeHasNoParameterlessConstructor = "Cannot instantiate type '{0}' because there is no public parameterless constructor.";
    public const string FactoryGenerator_TypeNotPublic = "Cannot instantiate type '{0}' because it is not public.";
    public const string FactoryInterface = "factoryInterface";
    public const string Field_Not_Found = "A field or property with the name '{0}' was not found on the selected data source.";
    public const string FileName_does_not_exist = "The file '{0}' does not exist.";
    public const string FilteredAttributeDictionary_ArgumentMustBeString = "The argument must be a string.";
    public const string FontInfo_Bold = "Whether the font is bold.";
    public const string FontInfo_Italic = "Whether the font is italic.";
    public const string FontInfo_Name = "The preferred font to be used to render the control.";
    public const string FontInfo_Names = "Sequence of fonts that can be used to render the control.";
    public const string FontInfo_Overline = "Whether the font contains an overline.";
    public const string FontInfo_Size = "The size of the font.";
    public const string FontInfo_Strikeout = "Whether the font has a strike through it.";
    public const string FontInfo_Underline = "Whether the font is underlined.";
    public const string Form_Needs_Page = "HtmlForm cannot render without a reference to the Page instance.  Make sure your form has been added to the control tree.";
    public const string Form_Required_For_Focus = nameof(Form_Required_For_Focus);
    public const string FormView_AllowPaging = "Whether to turn on paging functionality in the FormView.";
    public const string FormView_CellPadding = "The padding within cells.";
    public const string FormView_CellSpacing = "The spacing between cells.";
    public const string FormView_DataKey = "The Data key of the currently displayed item.";
    public const string FormView_DataSourceMustBeCollection = "DetailsView with id '{0}' must have a data source that implements ICollection if AllowPaging is true.";
    public const string FormView_EditItemTemplate = "The template used when the control is in edit mode.";
    public const string FormView_FooterStyle = "The style applied to the footer.";
    public const string FormView_FooterTemplate = "The template used for the footer.";
    public const string FormView_InsertItemTemplate = "The template used when the control is in insert mode.";
    public const string FormView_OnItemCommand = "Fires when a CommandEvent is generated within the FormView.";
    public const string FormView_OnItemCreated = "Fires when the item is created.";
    public const string FormView_OnModeChanged = "Fires after the FormView's mode changes.";
    public const string FormView_OnModeChanging = "Fires before the FormView's mode changes.";
    public const string FormView_OnPageIndexChanged = "Fires when the page index of the FormView has changed.";
    public const string FormView_OnPageIndexChanging = "Fires when the page index of the FormView is changing.";
    public const string FormView_PageIndex = "The index of the current page being displayed by the control.";
    public const string FormView_RenderOuterTable = "Whether to render a table around the templates in the FormView.";
    public const string FormView_Rows = "The collection of rows.";
    public const string FormView_UnhandledEvent = "The FormView '{0}' fired event {1} which wasn't handled.";
    public const string GenericModelBinderProvider_ParameterMustSpecifyOpenGenericType = "The type '{0}' is not an open generic type.";
    public const string GenericModelBinderProvider_TypeArgumentCountMismatch = "The open model type '{0}' has {1} generic type argument(s), but the open binder type '{2}' has {3} generic type argument(s). The binder type must not be an open generic type or must have the same number of generic arguments as the open model type.";
    public const string GridView_PagerSettings = "Controls the paging UI settings associated with the control.";
    public const string Head_Needs_Page = "HtmlHead cannot render without a reference to the Page instance.  Make sure your head has been added to the control tree.";
    public const string HiddenField_OnValueChanged = "Fires when the value of the control changes.";
    public const string HiddenField_Value = "The value stored in the hidden field.";
    public const string HierarchicalDataBoundControl_InvalidDataSource = "HierarchicalDataBoundControl only accepts data sources that implement IHierarchicalDataSource or IHierarchicalEnumerable.";
    public const string HierarchicalDataControl_DataSourceDoesntExist = "The DataSourceID of '{0}' must be the ID of a control of type IHierarchicalDataSource.  A control with ID '{1}' could not be found.";
    public const string HierarchicalDataControl_DataSourceIDMustBeHierarchicalDataControl = "The DataSourceID of '{0}' must be the ID of a control of type IHierarchicalDataSource.  '{1}' is not an IHierarchicalDataSource.";
    public const string HierarchicalDataControl_ViewNotFound = "The view that hierarchical data bound control '{0}' requested could not be found.";
    public const string HtmlControl_OnServerClick = "Fires when the control is clicked.";
    public const string HtmlForm_OnlyIButtonControlCanBeDefaultButton = "The DefaultButton of '{0}' must be the ID of a control of type IButtonControl.";
    public const string HtmlHead_OnlyOneHeadAllowed = nameof(HtmlHead_OnlyOneHeadAllowed);
    public const string HtmlHead_OnlyOneTitleAllowed = "You can only have one <title> element within the <head> element.";
    public const string HtmlHead_StyleAlreadyRegistered = "You cannot register a style twice.";
    public const string HtmlInputHidden_OnServerChange = "Fires when the value of the control changes.";
    public const string HtmlInputImage_OnServerClick = "Fires when the image is clicked.";
    public const string HtmlInputText_ServerChange = "Fires when the text within the control changes.";
    public const string HtmlSelect_Cant_Multiselect_In_Single_Mode = "An HtmlSelect cannot have multiple items selected when Multiple is false.";
    public const string HtmlSelect_DataMember = "The data member of the select.";
    public const string HtmlSelect_DataTextField = "The field in the data source that provides the item text.";
    public const string HtmlSelect_DataValueField = "The field in the data source that provides the item value.";
    public const string HtmlSelect_OnServerChange = "Fires when the selection changes.";
    public const string HtmlTextArea_OnServerChange = "Fires when the text within the control changes.";
    public const string HTMLTextWriterUnbalancedPop = "A PopEndTag was called without a corresponding PushEndTag.";
    public const string HyperLink_ImageHeight = "The height of an image to be displayed.";
    public const string HyperLink_ImageUrl = "The URL of an image to be displayed.";
    public const string HyperLink_ImageWidth = "The width of an image to be displayed.";
    public const string HyperLink_NavigateUrl = "The URL to navigate to.";
    public const string HyperLink_Target = "The target frame for the NavigateUrl.";
    public const string HyperLink_Text = "The text to be shown for the link.";
    public const string HyperLinkField_DataNavigateUrlFields = "The fields bound to the NavigateUrl property of the hyperlink.";
    public const string HyperLinkField_DataNavigateUrlFormatString = nameof(HyperLinkField_DataNavigateUrlFormatString);
    public const string HyperLinkField_DataTextField = "The field bound to the text property of the hyperlink.";
    public const string HyperLinkField_DataTextFormatString = "The formatting applied to the value bound to the Text property of the hyperlink. For example, \"go back to: {0}\".";
    public const string HyperLinkField_NavigateUrl = "The URL navigated to by the hyperlink.";
    public const string HyperLinkField_Text = "The text used for the hyperlink.";
    public const string Id_already_used = "The ID '{0}' is already used by another control.";
    public const string Illegal_Device = "The '{0}' attribute does not support the use of device filters.";
    public const string Illegal_Resource_Builder = "The '{0}' attribute does not support the use of expression builders.";
    public const string Image_AlternateText = "The alternate text displayed when the image cannot be shown.";
    public const string Image_DescriptionUrl = "The URL containing a more detailed description of the image.";
    public const string Image_GenerateEmptyAlternateText = "Specifies whether an empty alternate text attribute is generated when the alternate text is not specified.";
    public const string Image_ImageAlign = "The alignment of the image.";
    public const string Image_ImageUrl = "The URL of the image to be shown.";
    public const string ImageButton_OnClick = "Fires when the image is clicked.";
    public const string ImageButton_OnCommand = "Fires when the image is clicked and an associated command is defined.";
    public const string ImageField_AlternateText = "The value of the AlternateText property of the image.";
    public const string ImageField_ConvertEmptyStringToNull = "Whether the field treats empty strings as null when the value is extracted from the field.";
    public const string ImageField_DataAlternateTextField = "The field bound to the AlternateText property of the image.";
    public const string ImageField_DataAlternateTextFormatString = "The formatting applied to the value bound to the AlternateText property of the image when using the DataAlternateTextField. For example, \"image: {0}\".";
    public const string ImageField_ImageUrlField = "The field to which the image URL is bound.";
    public const string ImageField_ImageUrlFormatString = "The formatting applied to the value bound to the ImageUrl property of the image.";
    public const string ImageField_NullImageUrl = "The URL of the image displayed if the data bound to the field is null.";
    public const string ImageField_ReadOnly = "Whether the field does not permit editing of its image field.";
    public const string ImageField_WrongControlType = "ImageField {0} contains a control that isn't a TextBox in edit mode, or an Image and a Label in read-only mode.  Override OnDataBindField to inherit from ImageField and add different controls.";
    public const string Include_not_allowed = "The include file '{0}' is not allowed in this page.";
    public const string Include_not_allowed_in_server_script_tag = "Server includes are not allowed in server script tags.";
    public const string Inconsistent_CodeFile_Language = "The language of the code file is inconsistent with the language of the page.";
    public const string Inner_Content_not_literal = "Cannot get inner content of {0} because the contents are not literal.";
    public const string InnerHtml_not_supported = "'{0}' does not support the InnerHtml property.";
    public const string InnerText_not_supported = "'{0}' does not support the InnerText property.";
    public const string Insufficient_trust_for_attribute = "The current trust level does not allow use of the '{0}' attribute";
    public const string Invalid_app_file_content = "The content in the application file is not valid.";
    public const string Invalid_app_VirtualPath = "The virtual path '{0}' is not a valid absolute virtual path within the current application.";
    public const string Invalid_attr = "The '{0}' attribute is not supported on this directive when a '{1}' attribute is present.";
    public const string Invalid_attribute_value = "'{0}' is not a valid value for attribute '{1}'.";
    public const string Invalid_boolean_attribute = "The '{0}' attribute must be set to 'true' or 'false'.";
    public const string Invalid_cache_settings_location = "The CacheSettings Location value is invalid.";
    public const string Invalid_clsid = "Cannot load type with CLASSID '{0}'.";
    public const string Invalid_collection_item_type = "{0} must have items of type '{1}'. '{2}' is of type '{3}'.";
    public const string Invalid_ControlState = "The state information is invalid for this page and might be corrupted.";
    public const string Invalid_culture_attribute = "The 'Culture' attribute must be set to a non-neutral culture.  Try one of the following: {0}.";
    public const string Invalid_CurrentPageIndex = nameof(Invalid_CurrentPageIndex);
    public const string Invalid_DataSource_Type = "An invalid data source is being used for {0}. A valid data source must implement either IListSource or IEnumerable.";
    public const string Invalid_enum_attribute = "The '{0}' attribute must be one of the following values: {1}.";
    public const string Invalid_enum_value = "'{0}' is not a valid value for attribute '{1}'. It must be of enum type '{2}'.";
    public const string Invalid_HtmlTextWriter = "An instance of '{0}' could not be used as an HtmlTextWriter. Make sure the specified class can be instantiated, extends System.Web.UI.HtmlTextWriter, and implements a constructor with a single parameter of type System.IO.TextWriter.";
    public const string Invalid_identifier = "'{0}' is not a valid identifier.";
    public const string Invalid_master_base = "The file '{0}' is not a valid master page.";
    public const string Invalid_nonnegative_integer_attribute = "The '{0}' attribute must be a non-negative integer.";
    public const string Invalid_positive_integer_attribute = "The '{0}' attribute must be set to a positive integer value.";
    public const string Invalid_progid = "Cannot load type with ProgID '{0}'.";
    public const string Invalid_reference_directive = "The Reference directive must have a VirtualPath attribute, and no other attributes.";
    public const string Invalid_reference_directive_attrib = "The file '{0}' is not of a type that can be used here.";
    public const string Invalid_resourcekey = "'{0}' is not a valid resource key.";
    public const string Invalid_scope = "'{0}' is not a valid object scope.";
    public const string Invalid_template_container = "Template property '{0}' has a TemplateContainer attribute set to '{1}', but that type does not implement INamingContainer.";
    public const string Invalid_type = "Could not load type '{0}'.";
    public const string Invalid_type_to_implement = "'{0}' exists but is not an interface.";
    public const string Invalid_type_to_inherit_from = "'{0}' is not allowed here because it does not extend class '{1}'.";
    public const string Invalid_typeless_reference = "The file '{0}' is not a valid here because it doesn't expose a type.";
    public const string Invalid_typeNameOrVirtualPath_directive = "The '{0}' directive must have exactly one attribute: TypeName or VirtualPath";
    public const string Invalid_use_of_config_uc = "The page '{0}' cannot use the user control '{1}', because it is registered in web.config and lives in the same directory as the page.";
    public const string Invalid_vpath = "'{0}' is not a valid virtual path.";
    public const string InvalidArgumentValue = "Invalid value for '{0}' parameter.";
    public const string InvalidExpressionPrefix = "The expression prefix '{0}' was not recognized.  Please correct the prefix or register the prefix in the <expressionBuilders> section of configuration.";
    public const string InvalidExpressionSyntax = "The expression '{0}' is invalid. Expressions use the syntax <%$ prefix:value %>.";
    public const string InvalidSerializedData = "The serialized data is invalid.";
    public const string IRenderOuterTableControl_CannotSetStyleWhenDisableRenderOuterTable = "The style property '{0}' cannot be used while RenderOuterTable is disabled on the {1} control with ID '{2}'.";
    public const string IsValid_Cant_Be_Called = nameof(IsValid_Cant_Be_Called);
    public const string Item_RepeatDirection = "The direction in which items are laid out.";
    public const string Label_AssociatedControlID = "The ID of the control associated with the Label.";
    public const string Label_Text = "The text to be shown for the Label.";
    public const string LabelForNotFound = "Unable to find control with id '{0}' that is associated with the Label '{1}'.";
    public const string LinkButton_OnClick = "Fires when the button is clicked.";
    public const string LinkButton_Text = "The text to be shown for the link.";
    public const string ListBox_Rows = "The number of visible rows to display.";
    public const string ListBox_SelectionMode = "The selection mode for the list.";
    public const string ListControl_AppendDataBoundItems = "Append data bound items to statically declared list items.";
    public const string ListControl_AutoPostBack = "Automatically postback to the server after selection is changed.";
    public const string ListControl_DataTextField = "The field in the data source which provides the item text.";
    public const string ListControl_DataTextFormatString = "The formatting applied to the text field. For example, \"{0:d}\".";
    public const string ListControl_DataValueField = "The field in the data source which provides the item value.";
    public const string ListControl_Items = "The collection of items in the list.";
    public const string ListControl_OnSelectedIndexChanged = "Fires when the selected index has been changed.";
    public const string ListControl_RenderWhenDataEmpty = "Render the control's outer markup when not bound to data or data is empty.";
    public const string ListControl_RenderWhenDataEmptyNotSupportedWithTableLayout = "The RepeatLayout property on control '{0}' does not support Table layout when RenderWhenDataEmpty is enabled.";
    public const string ListControl_SelectedItem = "The currently selected item.";
    public const string ListControl_SelectedValue = "The value of the currently selected item.";
    public const string ListControl_SelectionOutOfRange = "'{0}' has a {1} which is invalid because it does not exist in the list of items.";
    public const string ListControl_Text = "The text value.";
    public const string ListControl_TextChanged = "Fires when the text property has been changed.";
    public const string ListEnumCurrentOutOfRange = "The enumerator's current position is out of bounds of the list.";
    public const string ListEnumVersionMismatch = "Collection was modified; enumeration operation may not execute.";
    public const string ListSource_Missing_DataMember = "The IListSource does not contain a data source named '{0}'.  Check your DataMember value.";
    public const string ListSource_Without_DataMembers = "The IListSource does not contain any data sources.";
    public const string Literal_content_not_allowed = "Literal content ('{1}') is not allowed within a '{0}'.";
    public const string Literal_content_not_match_property = "Content ('{1}') does not match any properties within a '{0}', make sure it is well-formed.";
    public const string Literal_Mode = "Determines whether the text is transformed or encoded.";
    public const string Literal_Text = "The text to be shown for the literal.";
    public const string Login_Authenticate = "Raised to authenticate the user.";
    public const string Login_BorderPadding = "The padding from the border of the control.";
    public const string Login_CheckBoxStyle = "The style of the checkbox.";
    public const string Login_CreateUserIconUrl = "The URL of an icon for the create user link.";
    public const string Login_CreateUserUrl = "The URL of the create user page.";
    public const string Login_DefaultFailureText = "Your login attempt was not successful. Please try again.";
    public const string Login_DefaultLoginButtonText = "Log In";
    public const string Login_DefaultPasswordRequiredErrorMessage = "Password is required.";
    public const string Login_DefaultRememberMeText = "Remember me next time.";
    public const string Login_DefaultTitleText = "Log In";
    public const string Login_DefaultUserNameLabelText = "User Name:";
    public const string Login_DefaultUserNameRequiredErrorMessage = "User Name is required.";
    public const string Login_DestinationPageUrl = "The URL that the user is directed to upon successful login.";
    public const string Login_DisplayRememberMe = "True if the remember me checkbox is displayed.";
    public const string Login_FailureAction = "The action to take when a login attempt fails.";
    public const string Login_FailureText = "The text to be shown when a login attempt fails.";
    public const string Login_HelpPageIconUrl = "The URL of an icon for the help page link.";
    public const string Login_InvalidBorderPadding = "BorderPadding must be greater than or equal to -1.";
    public const string Login_LoggedIn = "Raised after the user is authenticated.";
    public const string Login_LoggingIn = "Raised before the user is authenticated.";
    public const string Login_LoginButtonImageUrl = "The URL of an image to be displayed for the login button.";
    public const string Login_LoginButtonStyle = "The style of the login button.";
    public const string Login_LoginButtonText = "The text to be shown for the login button.";
    public const string Login_LoginButtonType = "The type of the login button.";
    public const string Login_LoginError = "Raised if the authentication fails.";
    public const string Login_NoPasswordTextBox = "{0}: LayoutTemplate does not contain an IEditableTextControl with ID {1} for the password.";
    public const string Login_NoUserNameTextBox = "{0}: LayoutTemplate does not contain an IEditableTextControl with ID {1} for the username.";
    public const string Login_Orientation = "The general layout of the control.";
    public const string Login_PasswordRecoveryIconUrl = "The URL of an icon for the password recovery link.";
    public const string Login_PasswordRecoveryUrl = "The URL of the password recovery page.";
    public const string Login_PasswordRequiredErrorMessage = "The text to be shown in the validation summary when the password is empty.";
    public const string Login_RememberMeSet = "Whether the remember me checkbox is initially checked.";
    public const string Login_RememberMeText = "The text to be shown for the remember me checkbox.";
    public const string Login_ValidatorTextStyle = "The style of the validators' text.";
    public const string Login_VisibleWhenLoggedIn = "True if the control remains visible when a user is logged in.";
    public const string LoginControls_DefaultPasswordLabelText = "Password:";
    public const string LoginControls_DefaultRequiredFieldValidatorText = "*";
    public const string LoginControls_HelpPageUrl = "The URL of the help page.";
    public const string LoginControls_LabelStyle = "The style of the textbox labels.";
    public const string LoginControls_PasswordLabelText = "The text that identifies the password textbox.";
    public const string LoginControls_RenderOuterTable = "Whether to render a table around the templates in this control.";
    public const string LoginControls_TextBoxStyle = "The style of the textboxes.";
    public const string LoginControls_TextLayout = "The layout of the labels in relation to the textboxes.";
    public const string LoginControls_TitleText = "The text to be shown for the title.";
    public const string LoginControls_TitleTextStyle = "The style of the title.";
    public const string LoginControls_UserNameLabelText = "The text that identifies the user name textbox.";
    public const string LoginStatus_DefaultLoginText = "Login";
    public const string LoginStatus_DefaultLogoutText = "Logout";
    public const string LoginStatus_LoggedOut = "Raised after the user is logged out.";
    public const string LoginStatus_LoggingOut = "Raised before the user is logged out.";
    public const string LoginStatus_LoginImageUrl = "The URL of the image to be shown for the login button.";
    public const string LoginStatus_LoginText = "The text to be shown for the login button.";
    public const string LoginStatus_LogoutAction = "The action to perform after logging out.";
    public const string LoginStatus_LogoutImageUrl = "The URL of the image to be shown for the logout button.";
    public const string LoginStatus_LogoutPageUrl = "The URL redirected to after logging out.";
    public const string LoginStatus_LogoutText = "The text to be shown for the logout button.";
    public const string LoginView_RoleGroups = "Associates templates with roles.";
    public const string LoginView_ViewChanged = "Raised after the view is changed.";
    public const string LoginView_ViewChanging = "Raised before the view is changed.";
    public const string Malformed_server_block = "The server block is not well formed.";
    public const string Malformed_server_tag = "The server tag is not well formed.";
    public const string MasterPage_Cannot_ApplyTo_ReadOnly_Collection = nameof(MasterPage_Cannot_ApplyTo_ReadOnly_Collection);
    public const string MasterPage_Circular_Master_Not_Allowed = "Circular MasterPageFile references '{0}' are not allowed.";
    public const string MasterPage_doesnt_have_contentplaceholder = "Cannot find ContentPlaceHolder '{0}' in the master page '{1}', verify content control's ContentPlaceHolderID attribute in the content page.";
    public const string MasterPage_MasterPage = "The MasterPage of this Page.";
    public const string MasterPage_MasterPageFile = "Gets and sets the masterPageFile used by this page.";
    public const string MasterPage_Multiple_content = "Multiple contents applied to {0}.";
    public const string MembershipProvider_Name = "The name of the membership provider.";
    public const string meta_localize_error = nameof(meta_localize_error);
    public const string meta_localize_notallowed = "The '{0}' tag cannot have a meta:localize attribute.";
    public const string meta_reskey_notallowed = "The '{0}' tag cannot have a meta:resourcekey attribute.";
    public const string Missing_attr = "The directive is missing a '{0}' attribute.";
    public const string Missing_output_cache_attr = "The directive or the configuration settings profile must specify the '{0}' attribute.";
    public const string Missing_varybyparam_attr = "The directive is missing a 'VaryByParam' attribute, which should be set to \"none\", \"*\", or a semicolon separated list of values.";
    public const string MissingExpressionPrefix = "The expression '{0}' does not have a prefix.";
    public const string MissingExpressionValue = "The expression '{0}' does not have a value.";
    public const string Mixed_lang_not_supported = "Cannot use '{0}' because another language has been specified earlier in this page (or was implied from a CodeFile attribute).";
    public const string ModelBinderDictionary_MultipleAttributes = nameof(ModelBinderDictionary_MultipleAttributes);
    public const string ModelBinderProviderCollection_BinderForTypeNotFound = "A binder for type {0} could not be located.";
    public const string ModelBinderProviderCollection_InvalidBinderType = "The type '{0}' does not subclass {1} or implement the interface {2}.";
    public const string ModelBinderUtil_ModelCannotBeNull = "The binding context has a null Model, but this binder requires a non-null model of type '{0}'.";
    public const string ModelBinderUtil_ModelInstanceIsWrong = "The binding context has a Model of type '{0}', but this binder can only operate on models of type '{1}'.";
    public const string ModelBinderUtil_ModelMetadataCannotBeNull = "The binding context cannot have a null ModelMetadata.";
    public const string ModelBinderUtil_ModelTypeIsWrong = "The binding context has a ModelType of '{0}', but this binder can only operate on models of type '{1}'.";
    public const string ModelBindingContext_ModelMetadataMustBeSet = "The ModelMetadata property must be set before accessing this property.";
    public const string ModelDataSourceView_CancellationTokenIsNotSupported = "Parameters typed as CancellationToken are supported only in Task-returning methods.";
    public const string ModelDataSourceView_CannotCallMethodsWithOutOrRefParameters = "Cannot call the method '{0}' on page '{1}' because the parameter '{2}' is passed by reference.";
    public const string ModelDataSourceView_CannotCallOpenGenericMethods = "Cannot call the method '{0}' on page '{1}' because the method is a generic method.";
    public const string ModelDataSourceView_DataMethodNotFound = "A public method with the name '{0}' was either not found or there were multiple methods with the same name on the type '{1}'.";
    public const string ModelDataSourceView_DeleteNotSupported = "Deleting is not supported unless the DeleteMethod is specified.";
    public const string ModelDataSourceView_InsertNotSupported = "Inserting is not supported unless the InsertMethod is specified.";
    public const string ModelDataSourceView_InvalidAsyncPagingParameters = "When the DataBoundControl has paging enabled, the SelectMethod should return \"Task<System.Web.UI.WebControls.SelectResult>\" and have all these mandatory parameters : int startRowIndex, int maximumRows";
    public const string ModelDataSourceView_InvalidAsyncSelectReturnType = "The Task-based Select Method must return one of \"Task<IEnumerable<{0}>>\" or \"Task<System.Web.UI.WebControls.SelectResult>\" or \"Task<{0}>\" when ItemType is set to \"{0}\".";
    public const string ModelDataSourceView_InvalidPagingParameters = "When the DataBoundControl has paging enabled, either the SelectMethod should return an IQueryable<ItemType> or should have all these mandatory parameters : int startRowIndex, int maximumRows, out int totalRowCount";
    public const string ModelDataSourceView_InvalidSelectReturnType = "The Select Method must return one of \"IQueryable<{0}>\" or \"IEnumerable<{0}>\" or \"{0}\" when ItemType is set to \"{0}\".";
    public const string ModelDataSourceView_InvalidSortingParameters = "When the DataBoundControl has sorting enabled, either the SelectMethod should return an IQueryable<ItemType> or should have all these mandatory parameters : string sortByExpression";
    public const string ModelDataSourceView_MultipleModelMethodSources = "The DataMethodsType and DataMethodsObject properties cannot both be specified at the same time.";
    public const string ModelDataSourceView_MultipleValueProvidersNotSupported = "Only one source for the parameter '{0}' can be specified.";
    public const string ModelDataSourceView_MustUseSelectResultAsReturnType = "When using custom paging with an async Select method, the Select method return type must be \"Task<System.Web.UI.WebControls.SelectResult>\".";
    public const string ModelDataSourceView_ParameterCannotBeNull = "A null value for parameter '{0}' of non-nullable type '{1}' for method '{2}' in '{3}'. An optional parameter must be a reference type or a nullable type.";
    public const string ModelDataSourceView_ParameterValueHasWrongType = "An invalid value for parameter '{0}' for method '{1}' in '{2}'. The value from model binding is of type '{3}', but the parameter requires a value of type '{4}'.";
    public const string ModelDataSourceView_SelectNotSupported = "The Select operation is not supported unless the SelectMethod is specified.";
    public const string ModelDataSourceView_UpdateNotSupported = "Updating is not supported unless the UpdateMethod is specified.";
    public const string ModelDataSourceView_UseAsyncMethodMustBeUsingAsyncPage = nameof(ModelDataSourceView_UseAsyncMethodMustBeUsingAsyncPage);
    public const string Multiple_forms_not_allowed = "A page can have only one server-side Form tag.";
    public const string NeedHeader = nameof(NeedHeader);
    public const string NoCompileBinding_requires_ID = "The {0} control with a databinding to field {1} must have an ID when the page's CompilationMode is Never.";
    public const string NoFocusSupport = "Control of type '{0}' does not support the Focus operation.";
    public const string Non_existent_base_type = "The base type '{0}' does not exist in the source file '{1}'.";
    public const string Not_a_src_file = "'{0}' is not a valid source file.";
    public const string NoThemingSupport = "Control of type '{0}' does not support theming.";
    public const string Object_tag_must_have_class_classid_or_progid = "An object tag must contain a Class, ClassID or ProgID attribute.";
    public const string Object_tag_must_have_id = "An object tag must have an ID.";
    public const string Only_Content_supported_on_content_page = "Only Content controls are allowed directly in a content page that contains Content controls.";
    public const string Only_file_virtual_supported_on_server_include = "Only file and virtual are valid attributes in server-side include tags.";
    public const string Only_one_directive_allowed = "There can be only one '{0}' directive.";
    public const string Page_CallBackError = "There was an error in the callback.";
    public const string Page_CallBackInvalid = "The callback request is invalid.";
    public const string Page_CallBackTargetInvalid = "The target '{0}' for the callback could not be found or did not implement ICallbackEventHandler.";
    public const string Page_ClientTarget = "Allows you to override automatic detection of browser capabilities and force specific rendering.";
    public const string Page_ControlState_ControlCannotBeNull = "Cannot register a null control reference to require control state.";
    public const string Page_Description_Requires_Head = nameof(Page_Description_Requires_Head);
    public const string Page_Error = "Occurs when an uncaught exception is thrown.";
    public const string Page_ErrorPage = "URL of the associated error page.";
    public const string Page_Illegal_AsyncTimeout = "AsyncTimeout cannot be negative.";
    public const string Page_Illegal_MaxPageStateFieldLength = "MaxPageStateFieldLength can only be set to -1[off] or positive numbers.";
    public const string Page_InvalidUpdateModelAttempt = "'{0}' must be passed a value provider or alternatively must be invoked from inside a data-operation method of a control that uses model binding for data binding.";
    public const string Page_Keywords_Requires_Head = nameof(Page_Keywords_Requires_Head);
    public const string Page_MissingDataBindingContext = "Databinding methods such as Eval(), XPath(), and Bind() can only be used in the context of a databound control.";
    public const string Page_MustCallBeforeAndDuringPreRender = "{0} can only be called before and during PreRender.";
    public const string Page_OnAbortTransaction = "Occurs when a user aborts a transaction.";
    public const string Page_OnCommitTransaction = "Occurs when a user initiates a transaction.";
    public const string Page_theme_default_theme_already_defined = "Type {0} already has a default theme defined.";
    public const string Page_theme_invalid_name = "'{0}' is not a valid theme name.";
    public const string Page_theme_not_found = "Theme '{0}' cannot be found in the application or global theme directories.";
    public const string Page_theme_only_controls_allowed = "This object cannot be themed. Only controls of type System.Web.UI.Control are allowed at the top-level of a skin file.";
    public const string Page_theme_requires_page_header = nameof(Page_theme_requires_page_header);
    public const string Page_theme_skin_file = "skin file";
    public const string Page_theme_skinID_already_defined = "SkinId '{0}' is already used by another control skin of the same type.";
    public const string Page_Title_Requires_Head = nameof(Page_Title_Requires_Head);
    public const string Page_UnobtrusiveValidationMode = "Specifies the client side validation mode of the validators on this page.";
    public const string Page_UpdateModel_UpdateUnsuccessful = "The model of type '{0}' could not be updated.";
    public const string PageAsyncManager_CannotEnqueue = "An asynchronous task cannot be queued at this time.";
    public const string PagedDataSource_Cannot_Get_Count = "Cannot compute Count for a data source that does not implement ICollection.";
    public const string PagerSettings_FirstPageImageUrl = "The URL to the image to be used for the first page button.";
    public const string PagerSettings_FirstPageText = "The text to be used on the first page button.";
    public const string PagerSettings_LastPageImageUrl = "The URL to the image to be used for the last page button.";
    public const string PagerSettings_LastPageText = "The text to be used on the last page button.";
    public const string PagerSettings_Mode = "The type of paging UI to use.";
    public const string PagerSettings_NextPageImageUrl = "The URL to the image to be used for the next page button.";
    public const string PagerSettings_NextPageText = "The text to be used on the next page button.";
    public const string PagerSettings_PageButtonCount = "Number of pages to show in the paging UI.";
    public const string PagerSettings_PreviousPageImageUrl = "The URL to the image to be used for the previous page button.";
    public const string PagerSettings_PreviousPageText = "The text to be used on the previous page button.";
    public const string PagerStyle_Position = "The position of the navigation bar.";
    public const string PagerStyle_Visible = "Whether the paging UI is visible.";
    public const string PageStatePersister_PageCannotBeNull = "A PageStatePersister must be constructed with a non-null Page reference.";
    public const string Parameter_Invalid = "The parameter '{0}' is invalid.";
    public const string Parameter_NullOrEmpty = "The string parameter '{0}' cannot be null or empty.";
    public const string Parent_collections_readonly = "The control collection cannot be modified during DataBind, Init, Load, PreRender or Unload phases.";
    public const string Part_Untitled = "Untitled";
    public const string Path_must_be_rooted = "The virtual path '{0}' is not rooted.";
    public const string PersonalizationProviderHelper_TrimmedEmptyString = "Input parameter '{0}' cannot be an empty string.";
    public const string Physical_path_not_allowed = "'{0}' is a physical path, but a virtual path was expected.";
    public const string Postback_ctrl_not_found = "An error has occurred because a control with id '{0}' could not be located or a different control is assigned to the same ID after postback. If the ID is not assigned, explicitly set the ID property of controls that raise postback events to avoid this error.";
    public const string PostBackControl_ValidationGroup = "The group that should be validated when the control causes a postback.";
    public const string Previous_Page_Not_Authorized = "The current user is not allowed to access the previous page.";
    public const string Property_doesnt_have_property = "Property '{0}' does not have a property named '{1}'.";
    public const string Property_Had_Malformed_Url = "The '{0}' property had a malformed URL: {1}.";
    public const string Property_Invalid = "The value assigned to property '{0}' is invalid.";
    public const string Property_Not_ClsCompliant = "The '{0}' property of '{1}' has type '{2}', which is not CLS-compliant.";
    public const string Property_Not_Persistable = "The '{0}' property cannot be set declaratively.";
    public const string Property_Not_Supported = "The '{0}' property is not supported by '{1}' control.";
    public const string Property_NullOrEmpty = "The value assigned to property '{0}' cannot be null or empty.";
    public const string Property_readonly = "The '{0}' property is read-only and cannot be set.";
    public const string Property_Set_Not_Supported = "Setting the {0} property of {1} is not supported.";
    public const string Property_theme_disabled = "The '{0}' property of a control type {1} cannot be applied through a control skin.";
    public const string PropertySetAfterFrameworkInitialize = "The '{0}' property can only be set in the page directive or in the <pages> configuration section.";
    public const string PropertySetBeforePageEvent = "The '{0}' property can only be set in or before the '{1}' event.";
    public const string PropertySetBeforePreInitOrAddToControls = "The '{0}' property can only be set in or before the Page_PreInit event for static controls. For dynamic controls, set the property before adding it to the Controls collection.";
    public const string PropertySetBeforeStyleSheetApplied = "The '{0}' property cannot be changed dynamically if Page has a stylesheet theme. For dynamic controls, set the property before calling ApplyStyleSheetSkin().";
    public const string RadioButton_GroupName = "Group that this radio button belongs to.";
    public const string RadioButtonList_CellPadding = "The padding between each item.";
    public const string RadioButtonList_CellSpacing = "The spacing between each item.";
    public const string RadioButtonList_RepeatColumns = "The number of columns to use to lay out the items.";
    public const string RangeValidator_MaximumValue = "Maximum value for the control being validated.";
    public const string RangeValidator_MinmumValue = "Minimum value for the control being validated.";
    public const string RangeValidator_Type = "Data type of values for comparison.";
    public const string ReadOnlyHierarchicalDataSourceView_CantAccessPathInEnumerable = "Can't use a view path when the data source implements IHierarchicalEnumerable and not IHierarchicalDataSource.";
    public const string Reference_not_allowed = "The referenced file '{0}' is not allowed on this page.";
    public const string Repeater_AlternatingItemTemplate = "The template used for alternating items.";
    public const string Repeater_DataMember = "The table or view used for binding when a DataSet is used a data source.";
    public const string Repeater_FooterTemplate = "The template used for the footer.";
    public const string Repeater_Items = "The collection of items.";
    public const string Repeater_ItemTemplate = "The template used for the items.";
    public const string Repeater_OnItemCommand = "Fires when an event is generated within the DataList.";
    public const string Repeater_SeparatorTemplate = "The template used for the separators.";
    public const string RepeatInfo_ListLayoutDoesNotSupportHeaderFooterSeparator = "The UnorderedList and OrderedList layouts do not support headers, footers, or separators.";
    public const string RepeatInfo_ListLayoutDoesNotSupportImpliedOuterTable = "The UnorderedList and OrderedList layouts do not support implied outer tables.";
    public const string RepeatInfo_ListLayoutDoesNotSupportMultipleColumn = "The UnorderedList and OrderedList layouts do not support multi-column layouts.";
    public const string RepeatInfo_ListLayoutOnlySupportsVerticalLayout = "The UnorderedList and OrderedList layouts only support vertical layout.";
    public const string Request_not_available = "Request is not available in this context";
    public const string RequiredFieldValidator_InitialValue = "Initial value of the field to validate.";
    public const string Resource_problem = "An error occurred while try to load the string resources ({0} failed with error {1}).";
    public const string ResourceExpresionBuilder_PageResourceNotFound = "The resource class for this page was not found.  Please check if the resource file exists and try again.";
    public const string Response_not_available = "Response is not available in this context.";
    public const string Runat_can_only_be_server = "The Runat attribute must have the value Server.";
    public const string Sample_Databound_Text = "Databound";
    public const string Script_tag_without_src_must_have_content = "A script tag without a src attribute must have content.";
    public const string Server_tags_cant_contain_percent_constructs = "Server tags cannot contain <% ... %> constructs.";
    public const string Session_not_enabled = "Session state can only be used when enableSessionState is set to true, either in a configuration file or in the Page directive. Please also make sure that System.Web.SessionStateModule or a custom session state module is included in the <configuration>\\<system.web>\\<httpModules> section in the application configuration.";
    public const string SetStyleSheetThemeCannotBeSet = "The StyleSheetTheme property cannot be set, please override the property instead.";
    public const string Space_attribute = "The '{0}' attribute cannot contain spaces.";
    public const string StateManagedCollection_InvalidIndex = "Insertion index was out of range. Must be non-negative and less than or equal to size.";
    public const string StateManagedCollection_NoKnownTypes = "When implementing a derived StateManagedCollection, the implementation of CreateKnownType() must match the implementation of GetKnownTypes().";
    public const string StringPropertyBuilder_CannotHaveChildObjects = "The '{0}' property of '{1}' does not allow child objects.";
    public const string StringUtil_Trimmed_String_Exceed_Maximum_Length = "Trimmed string value '{0}' of input parameter '{1}' cannot exceed character length {2}.";
    public const string Style_BackColor = "Background color of the controls applied with this style.";
    public const string Style_BorderColor = "Border color of the controls applied with this style.";
    public const string Style_BorderStyle = "Style of the border of controls applied with this style.";
    public const string Style_BorderWidth = "Thickness of the border around the controls applied with this style.";
    public const string Style_CSSClass = "CSS class name applied to the user of this style.";
    public const string Style_Font = "The font used for text in controls applied with this style.";
    public const string Style_ForeColor = "Foreground color of the controls applied with this style.";
    public const string Style_Height = "The height of the controls applied with this style.";
    public const string Style_InvalidBorderWidth = "BorderWidth must be a non-negative number and cannot be a percentage.";
    public const string Style_InvalidHeight = "Height must be non negative.";
    public const string Style_InvalidWidth = "Width must be non negative.";
    public const string Style_RegisteredStylesAreReadOnly = "Registered Styles are read-only.";
    public const string Style_Width = "The width of the controls applied with this style.";
    public const string StyleSheetAreadyAppliedOnControl = "StyleSheetTheme is already applied on the control, it cannot be applied more than once.";
    public const string Substitution_NotAllowed = "Adding a Substitution control to a control collection is not permitted.";
    public const string Substitution_SiteNotAllowed = "Setting the Site on a Substitution control is not permitted.";
    public const string SynchronizationContextUtil_PageAsyncTaskTimeoutHandlerParallelNotCompatible = "Providing a non-null 'timeoutHandler' or a true 'executeInParallel' parameter value to the PageAsyncTask constructor is unsupported in the current application configuration.";
    public const string SynchronizationContextUtil_TaskReturningPageAsyncMethodsNotCompatible = "Task-returning Page methods are unsupported in the current application configuration.";
    public const string Table_BackImageUrl = "The background image of the table.";
    public const string Table_Caption = "The caption associated with the table.";
    public const string Table_CellPadding = "The padding within the table cells.";
    public const string Table_CellSpacing = "The spacing between the table cells.";
    public const string Table_GridLines = "Which grid lines to display between the table cells.";
    public const string Table_HorizontalAlign = "The horizontal alignment of the table.";
    public const string Table_Rows = "The collection of rows within the table.";
    public const string Table_SectionsMustBeInOrder = "The table {0} must contain row sections in order of header, body, then footer.";
    public const string Table_UseAccessibleHeader = "Indicates that the control should use accessible header cells in its containing table control.";
    public const string TableCell_AssociatedHeaderCellID = " Lists the header cell IDs associated with the current table cell. This attribute is rendered with the HTML headers attribute.";
    public const string TableCell_AssociatedHeaderCellNotFound = "The cell {0} listed as an associated header cell was not found.";
    public const string TableCell_ColumnSpan = "The number of columns this cell spans.";
    public const string TableCell_RowSpan = "The number of rows this cell spans.";
    public const string TableCell_Text = "The text to be rendered within the cell.";
    public const string TableCell_Wrap = "Whether the cell content should wrap or not.";
    public const string TableHeaderCell_AbbreviatedText = "Sets the abbreviated text for a header cell. The abbreviated text is rendered with the HTML abbr attribute. The abbr attribute is important for screen readers since it allows them to read a shortened version of a header for each cell in the table.";
    public const string TableHeaderCell_CategoryText = "Contains a list of categories associated with the table header (read by screen readers). The categories can be any string values. The categories are rendered as a comma delimited list using the HTML axis attribute.";
    public const string TableHeaderCell_Scope = "Represents the cells that the header applies to. Renders the HTML SCOPE attribute. Possible values are from the TableHeaderScope enumeration: Column and Row.";
    public const string TableItem_HorizontalAlign = "The horizontal alignment of the cell content.";
    public const string TableItem_VerticalAlign = "The vertical alignment of the cell content.";
    public const string TableItemStyle_Wrap = "Whether the cell content should wrap or not.";
    public const string TableRow_Cells = "The collection of cells within the table row.";
    public const string TableRow_TableSection = "The tablesection for the table row.";
    public const string TableSectionStyle_Visible = "Determines whether the table section is visible.";
    public const string TableStyle_BackImageUrl = "The background image within the table.";
    public const string TableStyle_CellPadding = "The spacing within cells of the table.";
    public const string TableStyle_CellSpacing = "The spacing between cells of the table.";
    public const string TableStyle_GridLines = "The type of grid to be shown within the table.";
    public const string TableStyle_HorizontalAlign = "The horizontal alignment of the table.";
    public const string TableStyle_InvalidCellPadding = "CellPadding must be greater than -1.";
    public const string TableStyle_InvalidCellSpacing = "CellSpacing must be greater than -1.";
    public const string TemplateControl_DataBindingRequiresPage = "Databinding methods such as Eval(), XPath(), and Bind() can only be used in controls contained in a page.";
    public const string TemplateField_AlternatingItemTemplate = "The template to use for alternating items in this field.";
    public const string TemplateField_CallbacksNotSupported = "Callbacks are not supported on TemplateField because some controls cannot update properly in a callback.  Turn callbacks off on '{0}'.";
    public const string TemplateField_EditItemTemplate = "The template to use for items in edit mode in this field.";
    public const string TemplateField_FooterTemplate = "The template to use for the footer in this field.";
    public const string TemplateField_HeaderTemplate = "The template to use for the header in this field.";
    public const string TemplateField_InsertItemTemplate = "The template to use for items in insert mode in this field.";
    public const string TemplateField_ItemTemplate = "The template to use for items in this field.";
    public const string TemplateHelpers_TemplateLimitations = nameof(TemplateHelpers_TemplateLimitations);
    public const string TextBox_AutoCompleteType = "The type of input content used by client browsers for auto completion.";
    public const string TextBox_AutoPostBack = "Automatically postback to the server after the text is modified.";
    public const string TextBox_Columns = "The width of the textbox in characters.";
    public const string TextBox_InvalidColumns = "Columns must be greater than -1.";
    public const string TextBox_InvalidRows = "Rows must be greater than -1.";
    public const string TextBox_MaxLength = "The maximum number of characters that can be entered.";
    public const string TextBox_OnTextChanged = "Fires when the text property has been changed.";
    public const string TextBox_ReadOnly = "Whether the text in the control can be changed or not.";
    public const string TextBox_Rows = "The number of lines to display for a multi-line textbox.";
    public const string TextBox_Text = "The text value.";
    public const string TextBox_TextMode = "The behavior mode of the textbox.";
    public const string TextBox_Wrap = "Whether the text should wrap or not.";
    public const string Too_late_for_RegisterRequiresViewStateEncryption = "The RegisterRequiresViewStateEncryption() method needs to be called before or during Page_PreRender.";
    public const string Too_late_for_ViewStateUserKey = "The ViewStateUserKey property needs to be set during Page_Init.";
    public const string Too_many_controls = "This page allows a limit of {0} controls, and that limit has been exceeded.";
    public const string Too_many_dependencies = "The page '{0}' allows a limit of {1} dependencies (direct or indirect), and that limit has been exceeded.";
    public const string Too_many_direct_dependencies = "The page '{0}' allows a limit of {1} direct dependencies, and that limit has been exceeded.";
    public const string Too_many_filters = "The string '{0}' contains too many device filters. There can be only one.";
    public const string TreeNode_Checked = "The checked state of the tree node.";
    public const string TreeNode_Expanded = "The expand state of the tree node.";
    public const string TreeNode_ImageToolTip = "The tooltip of the image associated with the tree node.";
    public const string TreeNode_ImageUrl = "The URL for the image for the tree node.";
    public const string TreeNode_NavigateUrl = "The URL to which the tree node navigates when selected.";
    public const string TreeNode_PopulateOnDemand = "Whether the node should populate its child nodes on demand.";
    public const string TreeNode_SelectAction = "The action that the node takes when selected.";
    public const string TreeNode_Selected = "The select state of the tree node.";
    public const string TreeNode_ShowCheckBox = "Whether the node should show its checkbox.";
    public const string TreeNode_Target = "The navigate target used when the node is selected.";
    public const string TreeNode_Text = "The display text of the tree node.";
    public const string TreeNode_ToolTip = "The tooltip of the tree node.";
    public const string TreeNode_Value = "The value of the tree node.";
    public const string TreeNodeBinding_Depth = "The tree depth associated with the tree level object.";
    public const string TreeNodeBinding_EmptyBindingText = "(Empty)";
    public const string TreeNodeBinding_FormatString = "The format string to use when formatting the value retrieved from TextField, for example: \"Node {0}\".";
    public const string TreeNodeBinding_ImageToolTip = "The default image tooltip for all nodes in this level when data binding.";
    public const string TreeNodeBinding_ImageToolTipField = "The table column or XML attribute name to use for the node's ImageToolTip property when data binding.";
    public const string TreeNodeBinding_ImageUrl = "The default image URL for all nodes in this level when data binding.";
    public const string TreeNodeBinding_ImageUrlField = "The table column or XML attribute name to use for the node's ImageUrl property when data binding.";
    public const string TreeNodeBinding_NavigateUrl = "The default navigation URL for all nodes in this level when data binding.";
    public const string TreeNodeBinding_NavigateUrlField = "The table column or XML attribute name to use for the node's NavigateUrl property when data binding.";
    public const string TreeNodeBinding_PopulateOnDemand = "If set to true, the TreeView populates data at the hierarchy-level represented by the TreeNodeBinding object on-demand (when the node is expanded), either by calling a service directly from the client (if TreeView.PopulateNodesFromClient is set) or by causing a postback to the server.  If set to false, the TreeView populates node data all-at-once, when the page containing the TreeView is first requested.";
    public const string TreeNodeBinding_SelectAction = "The default select action for all nodes in this level when data binding.";
    public const string TreeNodeBinding_ShowCheckBox = "The default show checkbox state for all nodes in this level when data binding.";
    public const string TreeNodeBinding_Target = "The default navigation target for all nodes in this level when data binding.";
    public const string TreeNodeBinding_TargetField = "The table column or XML attribute name to use for the node's Target property when data binding.";
    public const string TreeNodeBinding_Text = "The default text for all nodes in this level when data binding.";
    public const string TreeNodeBinding_TextField = "The table column or XML attribute name to use for a node's Text property when data binding.";
    public const string TreeNodeBinding_ToolTip = "The default tooltip for all nodes in this level when data binding.";
    public const string TreeNodeBinding_ToolTipField = "The table column or XML attribute name to use for the node's ToolTip property when data binding.";
    public const string TreeNodeBinding_Value = "The default value for all nodes in this level when data binding.";
    public const string TreeNodeBinding_ValueField = "The table column or XML attribute name to use for an item's Value property when databinding. When binding to a data source, this is usually a unique key in the current level view.";
    public const string TreeNodeCollection_InvalidArrayType = "TreeNode[] expected.";
    public const string TreeNodeStyle_ChildNodesPadding = "Gets and sets the vertical spacing between the node and its child nodes.";
    public const string TreeNodeStyle_HorizontalPadding = "The amount of horizontal padding around the node text.";
    public const string TreeNodeStyle_ImageUrl = "The URL of the image rendered on nodes.";
    public const string TreeNodeStyle_NodeSpacing = "The amount of vertical spacing between nodes.";
    public const string TreeNodeStyle_VerticalPadding = "The amount of vertical padding around the node text.";
    public const string TreeNodeStyleCollection_InvalidArgument = "TreeNodeStyleCollection can only contain TreeNodeStyles.";
    public const string TreeView_AutoGenerateDataBindings = "Whether the tree will automatically bind to data.";
    public const string TreeView_CheckChanged = "Fired after the check state of a node changes.";
    public const string TreeView_CollapseImageToolTip = "The tooltip format string of the image that collapses a node when clicked.";
    public const string TreeView_CollapseImageToolTipDefaultValue = "Collapse {0}";
    public const string TreeView_CollapseImageUrl = "The URL of the image that collapses a node when clicked.";
    public const string TreeView_DataBindings = "The data bindings for nodes in the tree.";
    public const string TreeView_DataSourceReturnedNullView = "The IHierarchicalDataSource that is the data source for TreeView '{0}' returned a null view for the given view path.";
    public const string TreeView_Default_SkipLinkText = "Skip Navigation Links.";
    public const string TreeView_EnableClientScript = "Whether the TreeView should try to use client-script.";
    public const string TreeView_ExpandDepth = "When data binding, how many levels of the tree to expand by default.";
    public const string TreeView_ExpandImageToolTip = "The tooltip format string of the image that expands a node when clicked.";
    public const string TreeView_ExpandImageToolTipDefaultValue = "Expand {0}";
    public const string TreeView_ExpandImageUrl = "The URL to the image that expands a node when clicked.";
    public const string TreeView_HoverNodeStyle = "The style that gets applied when the mouse hovers over a node (only available when client script is enabled).";
    public const string TreeView_ImageSet = "Whether to use the packaged images or those specified in the properties of TreeView.";
    public const string TreeView_InvalidDataBinding = "Could not bind to the '{0}' property (specified by {1}) while data binding TreeView.  Please check the Bindings fields.";
    public const string TreeView_LeafNodeStyle = "The style applied to leaf nodes.";
    public const string TreeView_LevelStyles = "The tree styles to be applied at each level of the tree.";
    public const string TreeView_LineImagesFolderUrl = "The relative folder that contains the line images for the TreeView.";
    public const string TreeView_MaxDataBindDepth = "The maximum depth to which the TreeView will databind.";
    public const string TreeView_NodeIndent = "The number of pixels to indent each node.";
    public const string TreeView_Nodes = "The initial collection of nodes for the tree.";
    public const string TreeView_NodeStyle = "The default style applied to all nodes.";
    public const string TreeView_NodeWrap = "Whether the node text should be word wrapped.";
    public const string TreeView_NoExpandImageUrl = "The URL of the image that represents the absence of an expand/collapse icon.";
    public const string TreeView_ParentNodeStyle = "The style applied to parent nodes (excluding root nodes).";
    public const string TreeView_PathSeparator = "The character used to separate parts of the path.";
    public const string TreeView_PopulateNodesFromClient = "Whether the TreeView should try to populate nodes from the client (without posting back).";
    public const string TreeView_PopulateOnlyEmptyNodes = "PopulateOnDemand can't be set to true on a node that already has children.";
    public const string TreeView_PopulateOnlyForDataSourceControls = "PopulateOnDemand only supported when binding the TreeView to a data source control using the DataSourceID property or when the TreeNodePopulate event is handled.";
    public const string TreeView_RootNodeStyle = "The style applied to root nodes.";
    public const string TreeView_SelectedNodeChanged = "Fired after the selected node changes.";
    public const string TreeView_SelectedNodeStyle = "The style applied to the selected node.";
    public const string TreeView_ShowCheckBoxes = "The node types next to which checkboxes should be shown.";
    public const string TreeView_ShowExpandCollapse = "Whether to show the expand/collapse icon next to the nodes.";
    public const string TreeView_ShowLines = "Whether to show lines connecting the tree nodes.";
    public const string TreeView_SkipLinkText = "The text that appears in the ALT attribute of the invisible image link that allows screen readers to skip repetitive content.";
    public const string TreeView_TreeNodeCollapsed = "Fired after a TreeNode is collapsed.";
    public const string TreeView_TreeNodeDataBound = "Fired after a TreeNode is databound.";
    public const string TreeView_TreeNodeExpanded = "Fired after a TreeNode is expanded.";
    public const string TreeView_TreeNodePopulate = "Fired when a TreeNode is being populated.";
    public const string TwoWayBinding_requires_ID = "The {0} control with a two-way databinding to field {1} must have an ID.";
    public const string Type_doesnt_have_property = "Type '{0}' does not have a public property named '{1}'.";
    public const string Type_doesnt_inherit_from_type = "Type '{0}' does not inherit from '{1}'.";
    public const string Type_not_creatable_from_string = "Cannot create an object of type '{0}' from its string representation '{1}' for the '{2}' property.";
    public const string Type_theme_disabled = "The control type '{0}' cannot be themed.";
    public const string TypeResService_Needed = "The supplied IDesignerHost must provide an implementation of ITypeResolutionService.";
    public const string Unexpected_Directory = "'{0}' is a directory, not a file.";
    public const string Unexpected_eof_looking_for_tag = "Unexpected end of file looking for </{0}> tag.";
    public const string Unexpected_Error = "An unexpected error occurred in '{0}'.";
    public const string Unhandled_Err_Error = "Unhandled Execution Error";
    public const string UnitParseNoDigits = "'{0}' cannot be parsed as a unit as there are no numeric values in it. Examples of valid unit strings are '1px' and '.5in'.";
    public const string UnitParseNumericPart = "The numeric part ('{1}') of '{0}' cannot be parsed as a numeric part of a {2} unit.";
    public const string Unknown_buildprovider_extension = "There is no build provider registered for the extension '{0}'. You can register one in the <compilation><buildProviders> section in machine.config or web.config. Make sure is has a BuildProviderAppliesToAttribute attribute which includes the value '{1}' or 'All'.";
    public const string Unknown_directive = "The directive '{0}' is unknown.";
    public const string Unknown_server_tag = "Unknown server tag '{0}'.";
    public const string UserName_InitialValue = "The initial value in the user name textbox.";
    public const string Validator_bad_control_type = "Control '{0}' referenced by the {1} property of '{2}' cannot be validated.";
    public const string Validator_control_blank = "The ControlToValidate property of '{0}' cannot be blank.";
    public const string Validator_control_not_found = "Unable to find control id '{0}' referenced by the '{1}' property of '{2}'.";
    public const string Validator_range_overalap = "The MaximumValue {0} cannot be less than the MinimumValue {1} of {2}.";
    public const string Validator_value_bad_type = "The value '{0}' of the {1} property of '{2}' cannot be converted to type '{3}'.";
    public const string Value_Set_Not_Supported = "The value property on {0} is not settable.";
    public const string ValueProviderResult_ConversionThrew = "The parameter conversion from type '{0}' to type '{1}' failed. See the inner exception for more information.";
    public const string ValueProviderResult_NoConverterExists = "The parameter conversion from type '{0}' to type '{1}' failed because no type converter can convert between these types.";
    public const string View_DataSourceReturnedNullView = "The IDataSource that is the data source for DetailsView '{0}' returned a null view.  Check that the DataMember property value of DetailsView is valid.";
    public const string View_DefaultMode = "The mode that the control will begin in, and will revert to after a Cancel, Insert, or Update command.";
    public const string View_EditRowStyle = "The style applied to rows when the control is in edit mode.";
    public const string View_EmptyDataRowStyle = "The style applied to the row that contains the EmptyDataTemplate.";
    public const string View_EmptyDataTemplate = "The template used for the control when no items are returned from the data source.";
    public const string View_EmptyDataText = "The text shown in the empty data row if no EmptyDataTemplate is defined.";
    public const string View_FooterText = "The text shown in the footer if no FooterTemplate is defined.";
    public const string View_HeaderText = "The text shown in the header if no HeaderTemplate is defined.";
    public const string View_InsertRowStyle = "The style applied to rows when the control is in insert mode.";
    public const string View_PagerTemplate = "The template used for the pager.";
    public const string View_RowStyle = "The style applied to rows.";
    public const string ViewState_AuthenticationFailed = nameof(ViewState_AuthenticationFailed);
    public const string ViewState_ClientDisconnected = "The client disconnected.";
    public const string ViewState_InvalidViewState = "Invalid viewstate.";
    public const string ViewState_InvalidViewStatePlus = "Invalid viewstate. {0}";
    public const string ViewState_MissingViewStateField = "Invalid viewstate: Missing field: {0}.";
    public const string VirtualPath_Length_Zero = "The file's virtual path must have a length greater than zero.";
    public const string WebControl_AccessKey = "Keyboard shortcut used by the control.";
    public const string WebControl_Attributes = "Tag attributes of the control.";
    public const string WebControl_BackColor = "Color of the background of the control.";
    public const string WebControl_BackImageUrl = "The background image within the control.";
    public const string WebControl_BorderColor = "Color of the border around the control.";
    public const string WebControl_BorderStyle = "Style of the border around the control.";
    public const string WebControl_BorderWidth = "Width of the border around the control.";
    public const string WebControl_CantFindProvider = "Could not find the specified membership provider.";
    public const string WebControl_CaptionAlign = "The alignment of the associated caption.";
    public const string WebControl_CommandArgument = "The command argument associated with the button.";
    public const string WebControl_CommandName = "The command associated with the button.";
    public const string WebControl_ControlStyle = "The style associated with the control.";
    public const string WebControl_ControlStyleCreated = "Whether the style associated with the control has been created.";
    public const string WebControl_CSSClassName = "CSS Class name applied to the control.";
    public const string WebControl_Enabled = "Enabled state of the control.";
    public const string WebControl_FailureTextStyle = "The style of the failure text.";
    public const string WebControl_Font = "The font used for text within the control.";
    public const string WebControl_ForeColor = "Color of the text within the control.";
    public const string WebControl_HeaderStyle = "The style applied to the header.";
    public const string WebControl_HeaderTemplate = "The template used for the header.";
    public const string WebControl_Height = "The height of the control.";
    public const string WebControl_HorizontalAlign = "The horizontal alignment of the control.";
    public const string WebControl_HyperLinkStyle = "The style of the hyperlinks.";
    public const string WebControl_InstructionText = "Text that is displayed to give instructions.";
    public const string WebControl_InstructionTextStyle = "The style of the instructions.";
    public const string WebControl_InvalidAccessKey = "AccessKey too long, cannot be more than one character.";
    public const string WebControl_PagerStyle = "Controls the paging UI style associated with the control.";
    public const string WebControl_RepeatLayout = "Whether items are repeated in a table or in-flow.";
    public const string WebControl_SelectedIndex = "The index of the currently selected item.";
    public const string WebControl_Style = "Low-level access to control styles.";
    public const string WebControl_TabIndex = "The tab order of the control.";
    public const string WebControl_TextAlign = "The alignment of the text label with respect to each item.";
    public const string WebControl_Tooltip = "The tooltip displayed when the mouse is over the control.";
    public const string WebControl_Width = "The width of the control.";
    public const string WebPartExportHandler_DisabledExportHandler = nameof(WebPartExportHandler_DisabledExportHandler);
    public const string WebPartExportHandler_InvalidArgument = "Invalid export parameters.";
}
