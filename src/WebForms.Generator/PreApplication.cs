// MIT License.

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Operations;

namespace WebForms.Generator;

[Generator]
public class PreApplicationStartMethodAttributeGenerator : IIncrementalGenerator
{
    private sealed record WebFormsDetails(string Path, string Type);

    private sealed class n : SymbolVisitor
    {
        public override void VisitNamespace(INamespaceSymbol symbol)
        {
            base.VisitNamespace(symbol);
        }
    }

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var precompilation = context.CompilationProvider
            .Select((c, token) =>
            {
                var preApplication = c.GetTypeByMetadataName("System.Web.PreApplicationStartMethodAttribute");
                var assemblies = new List<string>();

                if (preApplication is null)
                {
                    return ImmutableArray<string>.Empty;
                }

                var builder = ImmutableArray.CreateBuilder<string>();

                foreach (var r in c.References)
                {
                    if (c.GetAssemblyOrModuleSymbol(r) is { } assembly)
                    {
                        var aa = assembly.GetAttributes();

                        if (assembly.Name.Contains("ScriptManager"))
                        {
                        }

                        assemblies.Add(assembly.Name);

                        foreach (var a in assembly.GetAttributes())
                        {
                            if (SymbolEqualityComparer.Default.Equals(a.AttributeClass, preApplication))
                            {

                            }
                        }
                    }
                    else
                    {
                    }
                }

                return builder.ToImmutable();
            });

        var pagesWithDiagnostics = context.SyntaxProvider.CreateSyntaxProvider(
            predicate: static (node, _) => node.TryGetMapMethodName(out var method) && method == "AddPreApplicationStartMethod",
            transform: static (context, token) =>
            {
                var operation = context.SemanticModel.GetOperation(context.Node, token);

                if (operation is IInvocationOperation invocation)
                {
                    return invocation.GetLocation();
                }

                return default;
            })
            .Where(static invocation => invocation is { });

        var final = pagesWithDiagnostics.Combine(precompilation);

        context.RegisterSourceOutput(final, (context, source) =>
        {
            if (source.Left is not { } location)
            {
                return;
            }

            var pages = source.Right;

            if (pages.Length == 0)
            {
                return;
            }

            using var str = new StringWriter();
            using var indented = new IndentedTextWriter(str);

            indented.WriteLine("ï»¿// <auto-generated />");
            indented.WriteLine();
            indented.WriteLine("using Microsoft.AspNetCore.SystemWebAdapters;");
            indented.WriteLine("using Microsoft.AspNetCore.SystemWebAdapters.HttpHandlers;");
            indented.WriteLine("using Microsoft.Extensions.FileProviders;");
            indented.WriteLine("using Microsoft.Extensions.Primitives;");
            indented.WriteLine();
            indented.WriteLine("#pragma warning disable");
            indented.WriteLine();
            indented.WriteLine("namespace WebForms.Generated");
            indented.WriteLine("{");
            indented.Indent++;
            indented.WriteLine("internal static class InterceptedCompiledWebForms");
            indented.WriteLine("{");
            indented.Indent++;

            indented.Write("[System.Runtime.CompilerServices.InterceptsLocation(\"");
            indented.Write(location.FilePath.Replace("\\", "\\\\"));
            indented.Write("\", ");
            indented.Write(location.Line);
            indented.Write(", ");
            indented.Write(location.Character);
            indented.WriteLine(")]");

            indented.WriteLine("internal static IWebFormsBuilder AddCompiledPages(this IWebFormsBuilder builder)");
            indented.WriteLine("{");
            indented.Indent++;
            indented.WriteLine("builder.Services.AddSingleton<IHttpHandlerCollection, InterceptedWebFormsPagesManager>();");
            indented.WriteLine("return builder;");
            indented.Indent--;
            indented.WriteLine("}");

            indented.Indent--;
            indented.WriteLine("}");
            indented.WriteLine();

            indented.WriteLine("file sealed class InterceptedWebFormsPagesManager : IHttpHandlerCollection");
            indented.WriteLine("{");
            indented.Indent++;

            indented.WriteLine("public IEnumerable<IHttpHandlerMetadata> GetHandlerMetadata()");
            indented.WriteLine("{");
            indented.Indent++;

            foreach (var page in pages)
            {
                if (page is { })
                {
                    //indented.WriteLine($"yield return HandlerMetadata.Create<{page.Type}>(\"{page.Path}\");");
                }
            }

            indented.Indent--;
            indented.WriteLine("}");
            indented.WriteLine();

            indented.WriteLine("public IChangeToken GetChangeToken() => NullChangeToken.Singleton;");
            indented.WriteLine();

            indented.WriteLine("public IEnumerable<NamedHttpHandlerRoute> NamedRoutes => [];");

            indented.Indent--;
            indented.WriteLine("}");
            indented.Indent--;
            indented.WriteLine("}");
            indented.WriteLine();

            indented.Write("""
                    namespace System.Runtime.CompilerServices
                    {
                        [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                        file sealed class InterceptsLocationAttribute(string filePath, int line, int character) : Attribute
                        {
                        }
                    }
                    """);

            context.AddSource("InterceptedCompiledWebForms", str.ToString());
        });
    }
}
